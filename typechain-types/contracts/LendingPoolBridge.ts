/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace LendingPoolBridge {
  export type VTLRangeStruct = { lower: BigNumberish; upper: BigNumberish };

  export type VTLRangeStructOutput = [lower: bigint, upper: bigint] & {
    lower: bigint;
    upper: bigint;
  };
}

export interface LendingPoolBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "borrowerRequests"
      | "createBorrowerRequest"
      | "createLenderOffer"
      | "evmContractAddress"
      | "executeMatch"
      | "lenderOffers"
      | "liquidityPool"
      | "oracle"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "triggerLiquidation"
      | "wrappedToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BorrowerRequestCreated"
      | "CollateralRatioUpdated"
      | "LenderOfferCreated"
      | "LiquidationTriggered"
      | "MatchCreated"
      | "OwnershipTransferred"
      | "ProofVerified"
      | "WrappedTokensGenerated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "borrowerRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createBorrowerRequest",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLenderOffer",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "evmContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMatch",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderOffers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerLiquidation",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowerRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBorrowerRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLenderOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evmContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedToken",
    data: BytesLike
  ): Result;
}

export namespace BorrowerRequestCreatedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    collateral: BigNumberish,
    requested: BigNumberish,
    vtlLower: BigNumberish,
    vtlUpper: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    collateral: bigint,
    requested: bigint,
    vtlLower: bigint,
    vtlUpper: bigint
  ];
  export interface OutputObject {
    borrower: string;
    collateral: bigint;
    requested: bigint;
    vtlLower: bigint;
    vtlUpper: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralRatioUpdatedEvent {
  export type InputTuple = [borrower: AddressLike, ratio: BigNumberish];
  export type OutputTuple = [borrower: string, ratio: bigint];
  export interface OutputObject {
    borrower: string;
    ratio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LenderOfferCreatedEvent {
  export type InputTuple = [
    lender: AddressLike,
    amount: BigNumberish,
    vtlLower: BigNumberish,
    vtlUpper: BigNumberish
  ];
  export type OutputTuple = [
    lender: string,
    amount: bigint,
    vtlLower: bigint,
    vtlUpper: bigint
  ];
  export interface OutputObject {
    lender: string;
    amount: bigint;
    vtlLower: bigint;
    vtlUpper: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationTriggeredEvent {
  export type InputTuple = [
    borrower: AddressLike,
    lender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [borrower: string, lender: string, amount: bigint];
  export interface OutputObject {
    borrower: string;
    lender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MatchCreatedEvent {
  export type InputTuple = [
    lender: AddressLike,
    borrower: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [lender: string, borrower: string, amount: bigint];
  export interface OutputObject {
    lender: string;
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofVerifiedEvent {
  export type InputTuple = [
    user: AddressLike,
    isLender: boolean,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, isLender: boolean, amount: bigint];
  export interface OutputObject {
    user: string;
    isLender: boolean;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedTokensGeneratedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingPoolBridge extends BaseContract {
  connect(runner?: ContractRunner | null): LendingPoolBridge;
  waitForDeployment(): Promise<this>;

  interface: LendingPoolBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  borrowerRequests: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        bigint,
        bigint,
        LendingPoolBridge.VTLRangeStructOutput,
        boolean,
        boolean,
        bigint
      ] & {
        borrower: string;
        collateralAmount: bigint;
        requestedAmount: bigint;
        vtlRange: LendingPoolBridge.VTLRangeStructOutput;
        isActive: boolean;
        proofVerified: boolean;
        wrappedCollateralBalance: bigint;
      }
    ],
    "view"
  >;

  createBorrowerRequest: TypedContractMethod<
    [
      collateralAmount: BigNumberish,
      requestedAmount: BigNumberish,
      vtlLower: BigNumberish,
      vtlUpper: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createLenderOffer: TypedContractMethod<
    [amount: BigNumberish, vtlLower: BigNumberish, vtlUpper: BigNumberish],
    [void],
    "nonpayable"
  >;

  evmContractAddress: TypedContractMethod<[], [string], "view">;

  executeMatch: TypedContractMethod<
    [lender: AddressLike, borrower: AddressLike],
    [boolean],
    "nonpayable"
  >;

  lenderOffers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        bigint,
        LendingPoolBridge.VTLRangeStructOutput,
        boolean,
        boolean,
        bigint
      ] & {
        lender: string;
        amount: bigint;
        vtlRange: LendingPoolBridge.VTLRangeStructOutput;
        isActive: boolean;
        proofVerified: boolean;
        wrappedTokenBalance: bigint;
      }
    ],
    "view"
  >;

  liquidityPool: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  triggerLiquidation: TypedContractMethod<
    [borrower: AddressLike, lender: AddressLike],
    [void],
    "nonpayable"
  >;

  wrappedToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "borrowerRequests"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        bigint,
        bigint,
        LendingPoolBridge.VTLRangeStructOutput,
        boolean,
        boolean,
        bigint
      ] & {
        borrower: string;
        collateralAmount: bigint;
        requestedAmount: bigint;
        vtlRange: LendingPoolBridge.VTLRangeStructOutput;
        isActive: boolean;
        proofVerified: boolean;
        wrappedCollateralBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createBorrowerRequest"
  ): TypedContractMethod<
    [
      collateralAmount: BigNumberish,
      requestedAmount: BigNumberish,
      vtlLower: BigNumberish,
      vtlUpper: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createLenderOffer"
  ): TypedContractMethod<
    [amount: BigNumberish, vtlLower: BigNumberish, vtlUpper: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "evmContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeMatch"
  ): TypedContractMethod<
    [lender: AddressLike, borrower: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lenderOffers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        bigint,
        LendingPoolBridge.VTLRangeStructOutput,
        boolean,
        boolean,
        bigint
      ] & {
        lender: string;
        amount: bigint;
        vtlRange: LendingPoolBridge.VTLRangeStructOutput;
        isActive: boolean;
        proofVerified: boolean;
        wrappedTokenBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidityPool"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "triggerLiquidation"
  ): TypedContractMethod<
    [borrower: AddressLike, lender: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wrappedToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BorrowerRequestCreated"
  ): TypedContractEvent<
    BorrowerRequestCreatedEvent.InputTuple,
    BorrowerRequestCreatedEvent.OutputTuple,
    BorrowerRequestCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralRatioUpdated"
  ): TypedContractEvent<
    CollateralRatioUpdatedEvent.InputTuple,
    CollateralRatioUpdatedEvent.OutputTuple,
    CollateralRatioUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LenderOfferCreated"
  ): TypedContractEvent<
    LenderOfferCreatedEvent.InputTuple,
    LenderOfferCreatedEvent.OutputTuple,
    LenderOfferCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationTriggered"
  ): TypedContractEvent<
    LiquidationTriggeredEvent.InputTuple,
    LiquidationTriggeredEvent.OutputTuple,
    LiquidationTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "MatchCreated"
  ): TypedContractEvent<
    MatchCreatedEvent.InputTuple,
    MatchCreatedEvent.OutputTuple,
    MatchCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProofVerified"
  ): TypedContractEvent<
    ProofVerifiedEvent.InputTuple,
    ProofVerifiedEvent.OutputTuple,
    ProofVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "WrappedTokensGenerated"
  ): TypedContractEvent<
    WrappedTokensGeneratedEvent.InputTuple,
    WrappedTokensGeneratedEvent.OutputTuple,
    WrappedTokensGeneratedEvent.OutputObject
  >;

  filters: {
    "BorrowerRequestCreated(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BorrowerRequestCreatedEvent.InputTuple,
      BorrowerRequestCreatedEvent.OutputTuple,
      BorrowerRequestCreatedEvent.OutputObject
    >;
    BorrowerRequestCreated: TypedContractEvent<
      BorrowerRequestCreatedEvent.InputTuple,
      BorrowerRequestCreatedEvent.OutputTuple,
      BorrowerRequestCreatedEvent.OutputObject
    >;

    "CollateralRatioUpdated(address,uint256)": TypedContractEvent<
      CollateralRatioUpdatedEvent.InputTuple,
      CollateralRatioUpdatedEvent.OutputTuple,
      CollateralRatioUpdatedEvent.OutputObject
    >;
    CollateralRatioUpdated: TypedContractEvent<
      CollateralRatioUpdatedEvent.InputTuple,
      CollateralRatioUpdatedEvent.OutputTuple,
      CollateralRatioUpdatedEvent.OutputObject
    >;

    "LenderOfferCreated(address,uint256,uint256,uint256)": TypedContractEvent<
      LenderOfferCreatedEvent.InputTuple,
      LenderOfferCreatedEvent.OutputTuple,
      LenderOfferCreatedEvent.OutputObject
    >;
    LenderOfferCreated: TypedContractEvent<
      LenderOfferCreatedEvent.InputTuple,
      LenderOfferCreatedEvent.OutputTuple,
      LenderOfferCreatedEvent.OutputObject
    >;

    "LiquidationTriggered(address,address,uint256)": TypedContractEvent<
      LiquidationTriggeredEvent.InputTuple,
      LiquidationTriggeredEvent.OutputTuple,
      LiquidationTriggeredEvent.OutputObject
    >;
    LiquidationTriggered: TypedContractEvent<
      LiquidationTriggeredEvent.InputTuple,
      LiquidationTriggeredEvent.OutputTuple,
      LiquidationTriggeredEvent.OutputObject
    >;

    "MatchCreated(address,address,uint256)": TypedContractEvent<
      MatchCreatedEvent.InputTuple,
      MatchCreatedEvent.OutputTuple,
      MatchCreatedEvent.OutputObject
    >;
    MatchCreated: TypedContractEvent<
      MatchCreatedEvent.InputTuple,
      MatchCreatedEvent.OutputTuple,
      MatchCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProofVerified(address,bool,uint256)": TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;
    ProofVerified: TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;

    "WrappedTokensGenerated(address,uint256)": TypedContractEvent<
      WrappedTokensGeneratedEvent.InputTuple,
      WrappedTokensGeneratedEvent.OutputTuple,
      WrappedTokensGeneratedEvent.OutputObject
    >;
    WrappedTokensGenerated: TypedContractEvent<
      WrappedTokensGeneratedEvent.InputTuple,
      WrappedTokensGeneratedEvent.OutputTuple,
      WrappedTokensGeneratedEvent.OutputObject
    >;
  };
}
