/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LendingPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "borrowerPositions"
      | "depositCollateral"
      | "depositLenderAssets"
      | "executeBorrow"
      | "executeLiquidation"
      | "lenderPositions"
      | "lockBorrowerPosition"
      | "lockLenderPosition"
      | "owner"
      | "polkaVMBridge"
      | "renounceOwnership"
      | "setPolkaVMBridge"
      | "transferOwnership"
      | "withdrawExcessCollateral"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BorrowerLiquidated"
      | "CollateralDeposit"
      | "CollateralWithdraw"
      | "LenderDeposit"
      | "LenderWithdraw"
      | "OwnershipTransferred"
      | "PositionLocked"
      | "PositionUnlocked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "borrowerPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLenderAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBorrow",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeLiquidation",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockBorrowerPosition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockLenderPosition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "polkaVMBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPolkaVMBridge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExcessCollateral",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowerPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLenderAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockBorrowerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockLenderPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "polkaVMBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPolkaVMBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExcessCollateral",
    data: BytesLike
  ): Result;
}

export namespace BorrowerLiquidatedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    lender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [borrower: string, lender: string, amount: bigint];
  export interface OutputObject {
    borrower: string;
    lender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralDepositEvent {
  export type InputTuple = [borrower: AddressLike, amount: BigNumberish];
  export type OutputTuple = [borrower: string, amount: bigint];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralWithdrawEvent {
  export type InputTuple = [borrower: AddressLike, amount: BigNumberish];
  export type OutputTuple = [borrower: string, amount: bigint];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LenderDepositEvent {
  export type InputTuple = [lender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [lender: string, amount: bigint];
  export interface OutputObject {
    lender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LenderWithdrawEvent {
  export type InputTuple = [lender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [lender: string, amount: bigint];
  export interface OutputObject {
    lender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionLockedEvent {
  export type InputTuple = [user: AddressLike, isLender: boolean];
  export type OutputTuple = [user: string, isLender: boolean];
  export interface OutputObject {
    user: string;
    isLender: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionUnlockedEvent {
  export type InputTuple = [user: AddressLike, isLender: boolean];
  export type OutputTuple = [user: string, isLender: boolean];
  export interface OutputObject {
    user: string;
    isLender: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingPool extends BaseContract {
  connect(runner?: ContractRunner | null): LendingPool;
  waitForDeployment(): Promise<this>;

  interface: LendingPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  borrowerPositions: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        collateralAmount: bigint;
        borrowedAmount: bigint;
        isLocked: boolean;
      }
    ],
    "view"
  >;

  depositCollateral: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositLenderAssets: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeBorrow: TypedContractMethod<
    [borrower: AddressLike, lender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeLiquidation: TypedContractMethod<
    [borrower: AddressLike, lender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  lenderPositions: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, boolean] & { amount: bigint; isLocked: boolean }],
    "view"
  >;

  lockBorrowerPosition: TypedContractMethod<
    [borrower: AddressLike],
    [void],
    "nonpayable"
  >;

  lockLenderPosition: TypedContractMethod<
    [lender: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  polkaVMBridge: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPolkaVMBridge: TypedContractMethod<
    [_bridge: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawExcessCollateral: TypedContractMethod<
    [borrower: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "borrowerPositions"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        collateralAmount: bigint;
        borrowedAmount: bigint;
        isLocked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositCollateral"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositLenderAssets"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeBorrow"
  ): TypedContractMethod<
    [borrower: AddressLike, lender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeLiquidation"
  ): TypedContractMethod<
    [borrower: AddressLike, lender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lenderPositions"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, boolean] & { amount: bigint; isLocked: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockBorrowerPosition"
  ): TypedContractMethod<[borrower: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lockLenderPosition"
  ): TypedContractMethod<[lender: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "polkaVMBridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPolkaVMBridge"
  ): TypedContractMethod<[_bridge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawExcessCollateral"
  ): TypedContractMethod<
    [borrower: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BorrowerLiquidated"
  ): TypedContractEvent<
    BorrowerLiquidatedEvent.InputTuple,
    BorrowerLiquidatedEvent.OutputTuple,
    BorrowerLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralDeposit"
  ): TypedContractEvent<
    CollateralDepositEvent.InputTuple,
    CollateralDepositEvent.OutputTuple,
    CollateralDepositEvent.OutputObject
  >;
  getEvent(
    key: "CollateralWithdraw"
  ): TypedContractEvent<
    CollateralWithdrawEvent.InputTuple,
    CollateralWithdrawEvent.OutputTuple,
    CollateralWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "LenderDeposit"
  ): TypedContractEvent<
    LenderDepositEvent.InputTuple,
    LenderDepositEvent.OutputTuple,
    LenderDepositEvent.OutputObject
  >;
  getEvent(
    key: "LenderWithdraw"
  ): TypedContractEvent<
    LenderWithdrawEvent.InputTuple,
    LenderWithdrawEvent.OutputTuple,
    LenderWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PositionLocked"
  ): TypedContractEvent<
    PositionLockedEvent.InputTuple,
    PositionLockedEvent.OutputTuple,
    PositionLockedEvent.OutputObject
  >;
  getEvent(
    key: "PositionUnlocked"
  ): TypedContractEvent<
    PositionUnlockedEvent.InputTuple,
    PositionUnlockedEvent.OutputTuple,
    PositionUnlockedEvent.OutputObject
  >;

  filters: {
    "BorrowerLiquidated(address,address,uint256)": TypedContractEvent<
      BorrowerLiquidatedEvent.InputTuple,
      BorrowerLiquidatedEvent.OutputTuple,
      BorrowerLiquidatedEvent.OutputObject
    >;
    BorrowerLiquidated: TypedContractEvent<
      BorrowerLiquidatedEvent.InputTuple,
      BorrowerLiquidatedEvent.OutputTuple,
      BorrowerLiquidatedEvent.OutputObject
    >;

    "CollateralDeposit(address,uint256)": TypedContractEvent<
      CollateralDepositEvent.InputTuple,
      CollateralDepositEvent.OutputTuple,
      CollateralDepositEvent.OutputObject
    >;
    CollateralDeposit: TypedContractEvent<
      CollateralDepositEvent.InputTuple,
      CollateralDepositEvent.OutputTuple,
      CollateralDepositEvent.OutputObject
    >;

    "CollateralWithdraw(address,uint256)": TypedContractEvent<
      CollateralWithdrawEvent.InputTuple,
      CollateralWithdrawEvent.OutputTuple,
      CollateralWithdrawEvent.OutputObject
    >;
    CollateralWithdraw: TypedContractEvent<
      CollateralWithdrawEvent.InputTuple,
      CollateralWithdrawEvent.OutputTuple,
      CollateralWithdrawEvent.OutputObject
    >;

    "LenderDeposit(address,uint256)": TypedContractEvent<
      LenderDepositEvent.InputTuple,
      LenderDepositEvent.OutputTuple,
      LenderDepositEvent.OutputObject
    >;
    LenderDeposit: TypedContractEvent<
      LenderDepositEvent.InputTuple,
      LenderDepositEvent.OutputTuple,
      LenderDepositEvent.OutputObject
    >;

    "LenderWithdraw(address,uint256)": TypedContractEvent<
      LenderWithdrawEvent.InputTuple,
      LenderWithdrawEvent.OutputTuple,
      LenderWithdrawEvent.OutputObject
    >;
    LenderWithdraw: TypedContractEvent<
      LenderWithdrawEvent.InputTuple,
      LenderWithdrawEvent.OutputTuple,
      LenderWithdrawEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PositionLocked(address,bool)": TypedContractEvent<
      PositionLockedEvent.InputTuple,
      PositionLockedEvent.OutputTuple,
      PositionLockedEvent.OutputObject
    >;
    PositionLocked: TypedContractEvent<
      PositionLockedEvent.InputTuple,
      PositionLockedEvent.OutputTuple,
      PositionLockedEvent.OutputObject
    >;

    "PositionUnlocked(address,bool)": TypedContractEvent<
      PositionUnlockedEvent.InputTuple,
      PositionUnlockedEvent.OutputTuple,
      PositionUnlockedEvent.OutputObject
    >;
    PositionUnlocked: TypedContractEvent<
      PositionUnlockedEvent.InputTuple,
      PositionUnlockedEvent.OutputTuple,
      PositionUnlockedEvent.OutputObject
    >;
  };
}
