/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PriceOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MIN_UPDATE_INTERVAL"
      | "assetPrices"
      | "calculateCollateralRatio"
      | "getLatestPrice"
      | "isPriceActive"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateAssetPrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollateralRatioUpdated"
      | "OwnershipTransferred"
      | "PriceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MIN_UPDATE_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetPrices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCollateralRatio",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPriceActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAssetPrice",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_UPDATE_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPriceActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAssetPrice",
    data: BytesLike
  ): Result;
}

export namespace CollateralRatioUpdatedEvent {
  export type InputTuple = [borrower: AddressLike, ratio: BigNumberish];
  export type OutputTuple = [borrower: string, ratio: bigint];
  export interface OutputObject {
    borrower: string;
    ratio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    asset: AddressLike,
    price: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [asset: string, price: bigint, timestamp: bigint];
  export interface OutputObject {
    asset: string;
    price: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PriceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): PriceOracle;
  waitForDeployment(): Promise<this>;

  interface: PriceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MIN_UPDATE_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  assetPrices: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        price: bigint;
        lastUpdate: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  calculateCollateralRatio: TypedContractMethod<
    [
      borrower: AddressLike,
      collateralAsset: AddressLike,
      borrowedAsset: AddressLike,
      collateralAmount: BigNumberish,
      borrowedAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getLatestPrice: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  isPriceActive: TypedContractMethod<[asset: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAssetPrice: TypedContractMethod<
    [asset: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MIN_UPDATE_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetPrices"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        price: bigint;
        lastUpdate: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateCollateralRatio"
  ): TypedContractMethod<
    [
      borrower: AddressLike,
      collateralAsset: AddressLike,
      borrowedAsset: AddressLike,
      collateralAmount: BigNumberish,
      borrowedAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestPrice"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isPriceActive"
  ): TypedContractMethod<[asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAssetPrice"
  ): TypedContractMethod<
    [asset: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CollateralRatioUpdated"
  ): TypedContractEvent<
    CollateralRatioUpdatedEvent.InputTuple,
    CollateralRatioUpdatedEvent.OutputTuple,
    CollateralRatioUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;

  filters: {
    "CollateralRatioUpdated(address,uint256)": TypedContractEvent<
      CollateralRatioUpdatedEvent.InputTuple,
      CollateralRatioUpdatedEvent.OutputTuple,
      CollateralRatioUpdatedEvent.OutputObject
    >;
    CollateralRatioUpdated: TypedContractEvent<
      CollateralRatioUpdatedEvent.InputTuple,
      CollateralRatioUpdatedEvent.OutputTuple,
      CollateralRatioUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceUpdated(address,uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
  };
}
